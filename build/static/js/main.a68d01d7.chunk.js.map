{"version":3,"sources":["components/input.tsx","components/readerQR.tsx","App.tsx","index.tsx"],"names":["Input","text","setText","imageUrl","setImageUrl","generateQrCode","e","preventDefault","alert","QRCode","toDataURL","response","console","log","onSubmit","type","onChange","target","value","href","download","src","alt","ReaderQR","scanResultFile","setScanResultFile","scanResultWebCam","setScanResultWebCam","fileRef","useRef","handleChangeScanFile","files","file","QrScanner","scanImage","result","onScanFile","current","click","onClick","ref","accept","constraints","facingMode","exact","scanDelay","onResult","error","info","App","useState","className","rootElement","document","getElementById","createRoot","render"],"mappings":"uNA2CeA,EAjCe,SAAH,GAAkD,IAA5CC,EAAI,EAAJA,KAAMC,EAAO,EAAPA,QAASC,EAAQ,EAARA,SAAUC,EAAW,EAAXA,YAClDC,EAAc,iDAAG,WAAOC,GAAY,iFACrB,GAAnBA,EAAEC,iBACGN,EAAK,CAAD,wCACAO,MAAM,4BAA0B,gCAGRC,IAAOC,UAAUT,GAAM,KAAD,EAA/CU,EAAgB,OACtBP,EAAYO,GACZC,QAAQC,IAAIZ,GAAM,kDAElBW,QAAQC,IAAI,EAAD,IAAQ,0DAEtB,gBAZmB,sCAapB,OACE,uBAAMC,SAAUT,EAAe,UAC7B,uBACEU,KAAK,OACLC,SAAU,SAACV,GAAsC,OAC/CJ,EAAQI,EAAEW,OAAOC,MAAM,IAG3B,wBAAQH,KAAK,SAAQ,SAAC,aACtB,uBACa,IAAZZ,GACC,mBAAGgB,KAAMhB,EAAUiB,SAAU,SAAS,SACpC,qBAAKC,IAAKlB,EAAUmB,IAAI,YAKlC,E,gBCyCeC,EAhEqB,SAAH,GAK1B,IAJLC,EAAc,EAAdA,eACAC,EAAiB,EAAjBA,kBACAC,EAAgB,EAAhBA,iBACAC,EAAmB,EAAnBA,oBAEMC,EAAUC,mBAIVC,EAAoB,iDAAG,WAAOxB,GAAgC,mFAC/C,GAAnBA,EAAEC,kBACED,EAAEW,OAAOc,MAAM,CAAD,eACc,OAAxBC,EAAO1B,EAAEW,OAAOc,MAAM,GAAG,EAAD,OACTE,IAAUC,UAAUF,GAAM,KAAD,EAAxCG,EAAM,OACZV,EAAkBU,GAClBvB,QAAQC,IAAIsB,GAAQ,2CAEvB,gBARyB,sCASpBC,EAAa,WACjBR,EAAQS,QAAQC,OAClB,EAUA,OACE,qCACE,gCACE,wBAAQC,QAAS,kBAAMH,CAAU,EAAC,SAAC,iBACnC,uBACEI,IAAKZ,EACLZ,SAAUc,EACVf,KAAK,OACL0B,OAAO,qCAET,+BAAI,iBAAejB,QAErB,gCACE,cAAC,IAAQ,CACPkB,YAjBY,CAClBC,WAAY,CAAEC,MAAO,gBAiBfC,UAAW,IACXC,SAAU,SAACX,EAAQY,GACXZ,IACJvB,QAAQC,IAAIsB,GACZR,EAA0B,OAANQ,QAAM,IAANA,OAAM,EAANA,EAAQlC,OAGxB8C,GACJnC,QAAQoC,KAAKD,EAEjB,IAEF,+BAAI,sBAAoBrB,UAIhC,EC3Ee,SAASuB,IACtB,MAAwBC,mBAAS,IAAG,mBAA7BjD,EAAI,KAAEC,EAAO,KACpB,EAAgCgD,mBAAS,IAAG,mBAArC/C,EAAQ,KAAEC,EAAW,KAC5B,EAA4C8C,mBAAS,IAAG,mBAAjD1B,EAAc,KAAEC,EAAiB,KACxC,EAAgDyB,mBAAS,IAAG,mBAArDxB,EAAgB,KAAEC,EAAmB,KAC5C,OACE,sBAAKwB,UAAU,MAAK,UAClB,6BAAI,sCACJ,cAAC,EAAK,CACJjD,QAASA,EACTD,KAAMA,EACNE,SAAUA,EACVC,YAAaA,IAEf,cAAC,EAAQ,CACPoB,eAAgBA,EAChBC,kBAAmBA,EACnBC,iBAAkBA,EAClBC,oBAAqBA,MAI7B,CCtBA,IAAMyB,EAAcC,SAASC,eAAe,QAC/BC,qBAAWH,GAEnBI,OACH,cAAC,aAAU,UACT,cAACP,EAAG,M","file":"static/js/main.a68d01d7.chunk.js","sourcesContent":["import React, { FC, Dispatch, KeyboardEvent, FormEvent } from \"react\";\nimport QRCode from \"qrcode\";\n\ninterface InputProps {\n  text: string;\n  imageUrl: string;\n  setText: Dispatch<React.SetStateAction<string>>;\n  setImageUrl: Dispatch<React.SetStateAction<string>>;\n}\n\nconst Input: FC<InputProps> = ({ text, setText, imageUrl, setImageUrl }) => {\n  const generateQrCode = async (e: FormEvent) => {\n    e.preventDefault();\n    if (!text) {\n      return alert(\"Please enter some value\");\n    }\n    try {\n      const response: string = await QRCode.toDataURL(text);\n      setImageUrl(response);\n      console.log(text);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n  return (\n    <form onSubmit={generateQrCode}>\n      <input\n        type=\"text\"\n        onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n          setText(e.target.value)\n        }\n      />\n      <button type=\"submit\">Generate</button>\n      <br />\n      {imageUrl != \"\" && (\n        <a href={imageUrl} download={\"qr.png\"}>\n          <img src={imageUrl} alt=\"img\" />\n        </a>\n      )}\n    </form>\n  );\n};\n\nexport default Input;\n","import React, {\n  FC,\n  useRef,\n  Dispatch,\n  SyntheticEvent,\n  ChangeEvent,\n  useState,\n} from \"react\";\nimport { QrReader } from \"react-qr-reader\";\nimport QrScanner from \"qr-scanner\";\n\ninterface ReaderQRProps {\n  scanResultFile: string;\n  setScanResultFile: Dispatch<React.SetStateAction<any>>;\n  scanResultWebCam: string;\n  setScanResultWebCam: Dispatch<React.SetStateAction<string>>;\n}\n\nconst ReaderQR: FC<ReaderQRProps> = ({\n  scanResultFile,\n  setScanResultFile,\n  scanResultWebCam,\n  setScanResultWebCam,\n}) => {\n  const fileRef = useRef<any>();\n  const handleErrorFile = (error: string) => {\n    console.log(error);\n  };\n  const handleChangeScanFile = async (e: ChangeEvent<HTMLInputElement>) => {\n    e.preventDefault();\n    if (e.target.files) {\n      const file = e.target.files[0];\n      const result = await QrScanner.scanImage(file);\n      setScanResultFile(result);\n      console.log(result);\n    }\n  };\n  const onScanFile = () => {\n    fileRef.current.click();\n  };\n  const handleScanWebCam = (result: string) => {\n    if (result) {\n      setScanResultWebCam(result);\n    }\n  };\n\n  const constraints = {\n    facingMode: { exact: \"environment\" },\n  };\n  return (\n    <>\n      <div>\n        <button onClick={() => onScanFile}>Scan QR code</button>\n        <input\n          ref={fileRef}\n          onChange={handleChangeScanFile}\n          type=\"file\"\n          accept=\"image/png, image/jgp, image/jpge\"\n        />\n        <h3>Scanned code: {scanResultFile}</h3>\n      </div>\n      <div>\n        <QrReader\n          constraints={constraints}\n          scanDelay={300}\n          onResult={(result, error) => {\n            if (!!result) {\n              console.log(result);\n              setScanResultWebCam(result?.text);\n            }\n\n            if (!!error) {\n              console.info(error);\n            }\n          }}\n        />\n        <h3>Scanned by WebCam: {scanResultWebCam}</h3>\n      </div>\n    </>\n  );\n};\n\nexport default ReaderQR;\n","import React, { useState } from \"react\";\nimport \"./styles.css\";\nimport Input from \"../src/components/input\";\nimport ReaderQR from \"./components/readerQR\";\n\nexport default function App() {\n  const [text, setText] = useState(\"\");\n  const [imageUrl, setImageUrl] = useState(\"\");\n  const [scanResultFile, setScanResultFile] = useState(\"\");\n  const [scanResultWebCam, setScanResultWebCam] = useState(\"\");\n  return (\n    <div className=\"App\">\n      <h1>Generate, download & scan QR Code</h1>\n      <Input\n        setText={setText}\n        text={text}\n        imageUrl={imageUrl}\n        setImageUrl={setImageUrl}\n      />\n      <ReaderQR\n        scanResultFile={scanResultFile}\n        setScanResultFile={setScanResultFile}\n        scanResultWebCam={scanResultWebCam}\n        setScanResultWebCam={setScanResultWebCam}\n      />\n    </div>\n  );\n}\n","import React, { StrictMode } from \"react\";\nimport { createRoot } from \"react-dom/client\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nconst root = createRoot(rootElement as HTMLElement);\n\nroot.render(\n  <StrictMode>\n    <App />\n  </StrictMode>\n);\n"],"sourceRoot":""}